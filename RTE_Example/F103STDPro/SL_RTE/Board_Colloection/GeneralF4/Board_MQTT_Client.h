#ifndef __ESP_APP_MQTT_CLIENT_H
#define __ESP_APP_MQTT_CLIENT_H

/* C++ detection */
#ifdef __cplusplus
extern "C" {
#endif

#include "Board_ESP8266.h"
#include "Board_MQTT_ClientEvt.h"
    
/**
 * \ingroup         ESP_APPS
 * \defgroup        ESP_APP_MQTT_CLIENT MQTT client
 * \brief           MQTT client
 * \{
 */

/**
 * \brief           Maximal number of open connections at a time
 * 
 * \note            This is default value. To change it, override value in `esp_config.h` configuration file
 */
#ifndef MQTT_MAX_REQUESTS
#define MQTT_MAX_REQUESTS               8
#endif

/**
 * \name            ESP_APP_MQTT_CLIENT_QOS Qualities of service
 * \anchor          ESP_APP_MQTT_CLIENT_QOS
 * \{
 */

#define MQTT_QOS_AT_MOST_ONCE           0x00    /*!< Delivery is not guaranteed to arrive, but can arrive `up to 1 time` = non-critical packets where losses are allowed */
#define MQTT_QOS_AT_LEAST_ONCE          0x01    /*!< Delivery is quaranteed `at least once`, but it may be delivered multiple times with the same content */
#define MQTT_QOS_EXACTLY_ONCE           0x02    /*!< Delivery is quaranteed `exactly once` = very critical packets such as billing informations or similar */

/**
 * \}
 */

struct mqtt_client;

/**
 * \brief           State of MQTT client
 */
typedef enum {
    MQTT_CONN_DISCONNECTED = 0x00,              /*!< Connection with server is not established */
    MQTT_CONN_CONNECTING,                       /*!< Client is connecting to server */
    MQTT_CONN_DISCONNECTING,                    /*!< Client connection is disconnecting from server */
    MQTT_CONNECTING,                            /*!< MQTT client is connecting... CONNECT command has been sent to server */
    MQTT_CONNECTED,                             /*!< MQTT is fully connected and ready to send data on topics */
} mqtt_state_t;

/**
 * \brief           MQTT client information structure
 */
typedef struct {
    const char* id;                             /*!< Client unique identifier. It is required and must be set by user */
    
    const char* user;                           /*!< Authentication username. Set to NULL if not required */
    const char* pass;                           /*!< Authentication password, set to NULL if not required */
    
    uint16_t keep_alive;                        /*!< Keep-alive parameter in units of seconds.
                                                        When set to 0, functionality is disabled (not recommended) */
    
    const char* will_topic;                     /*!< Will topic */
    const char* will_message;                   /*!< Will message */
    uint8_t will_qos;                           /*!< Will topic quality of service */
} mqtt_client_info_t;

/**
 * \brief           MQTT request object
 */
typedef struct {
    uint8_t status;                             /*!< Entry status flag for in use or pending bit */
    uint16_t packet_id;                         /*!< Packet ID generated by client on publish */
    
    void* arg;                                  /*!< User defined argument */
    uint32_t expected_sent_len;                 /*!< Number of total bytes which must be sent
                                                    on connection before we can say "packet was sent". */
    
    uint32_t timeout_start_time;                /*!< Timeout start time in units of milliseconds */
} mqtt_request_t;

/**
 * \brief           MQTT event types
 */
typedef enum {
    MQTT_EVT_CONNECT,                           /*!< MQTT client connect event */
    MQTT_EVT_SUBSCRIBE,                         /*!< MQTT client subscribed to specific topic */
    MQTT_EVT_UNSUBSCRIBE,                       /*!< MQTT client unsubscribed from specific topic */
    MQTT_EVT_PUBLISHED,                         /*!< MQTT client successfully published message to server */
    MQTT_EVT_PUBLISH_RECV,                      /*!< MQTT client received a publish message from server */
    MQTT_EVT_DISCONNECT,                        /*!< MQTT client disconnected from MQTT server */
    MQTT_EVT_KEEP_ALIVE,                        /*!< MQTT keep-alive sent to server and reply received */
} mqtt_evt_type_t;

/**
 * \brief           List of possible results from MQTT server when executing connect command
 */
typedef enum {
    MQTT_CONN_STATUS_ACCEPTED =                 0x00,   /*!< Connection accepted and ready to use */
    MQTT_CONN_STATUS_REFUSED_PROTOCOL_VERSION = 0x01,   /*!< Connection Refused, unacceptable protocol version */
    MQTT_CONN_STATUS_REFUSED_ID =               0x02,   /*!< Connection refused, identifier rejected  */
    MQTT_CONN_STATUS_REFUSED_SERVER =           0x03,   /*!< Connection refused, server unavailable */
    MQTT_CONN_STATUS_REFUSED_USER_PASS =        0x04,   /*!< Connection refused, bad user name or password */
    MQTT_CONN_STATUS_REFUSED_NOT_AUTHORIZED =   0x05,   /*!< Connection refused, not authorized */
    MQTT_CONN_STATUS_TCP_FAILED =               0x100,  /*!< TCP connection to server was not successful */
} mqtt_conn_status_t;

/**
 * \brief           MQTT event structure for callback function
 */
typedef struct {
    mqtt_evt_type_t type;                       /*!< Event type */
    union {
        struct {
            mqtt_conn_status_t status;          /*!< Connection status with MQTT */
        } connect;                              /*!< Event for connecting to server */
        struct {
            void* arg;                          /*!< User argument for callback function */
            espr_t res;                         /*!< Response status */
        } sub_unsub_scribed;                    /*!< Event for (un)subscribe to/from topics */
        struct {
            const uint8_t* topic;               /*!< Pointer to topic identifier */
            size_t topic_len;                   /*!< Length of topic */
            const void* payload;                /*!< Topic payload */
            size_t payload_len;                 /*!< Length of topic payload */
            uint8_t dup;                        /*!< Duplicate flag if message was sent again */
            uint8_t qos;                        /*!< Received packet quality of service */
        } publish_recv;                         /*!< Publish received event */
        struct {
            void* arg;                          /*!< User argument for callback function */
        } published;                            /*!< Published event */
    } evt;                                      /*!< Event data parameters */
} mqtt_evt_t;

/**
 * \brief           MQTT event callback function
 * \param[in]       client: MQTT client
 * \param[in]       evt: MQTT event with type and related data
 */
typedef void    (*mqtt_evt_fn)(struct mqtt_client* client, mqtt_evt_t* evt);

/**
 * \brief           MQTT client connection
 */
typedef struct mqtt_client {
    esp_conn_p conn;                            /*!< Active used connection for MQTT */
    const mqtt_client_info_t* info;             /*!< Connection info */
    mqtt_state_t conn_state;                    /*!< MQTT connection state */
    
    uint32_t poll_time;                         /*!< Poll time, increased every 500ms */
    
    mqtt_evt_t evt;                             /*!< MQTT event callback */
    mqtt_evt_fn evt_fn;                         /*!< Event callback function */
    
    esp_buff_t tx_buff;                         /*!< Buffer for raw output data to transmit */
    
    uint8_t is_sending;                         /*!< Flag if we are sending data currently */
    uint32_t sent_total;                        /*!< Total number of bytes sent so far on connection */
    uint32_t written_total;                     /*!< Total number of bytes written into send buffer and queued for send */
    
    uint16_t last_packet_id;                    /*!< Packet ID used on last connection */
    
    mqtt_request_t requests[MQTT_MAX_REQUESTS]; /*!< List of requests */
    
    uint8_t* rx_buff;                           /*!< RX buffer */
    size_t rx_buff_len;                         /*!< Length of RX buffer */
    
    uint8_t parser_state;                       /*!< Incoming data parser state */
    uint8_t msg_hdr_byte;                       /*!< Incoming message header byte */
    uint32_t msg_rem_len;                       /*!< Remaining length value of current message */
    uint32_t msg_curr_pos;                      /*!< Current buffer write pointer */
} mqtt_client_t;

mqtt_client_t*  mqtt_client_new(size_t tx_buff_len, size_t rx_buff_len);
void            mqtt_client_delete(mqtt_client_t* client);

espr_t          mqtt_client_connect(mqtt_client_t* client, const char* host, esp_port_t port, mqtt_evt_fn evt_fn, const mqtt_client_info_t* info);
espr_t          mqtt_client_disconnect(mqtt_client_t* client);
uint8_t         mqtt_client_is_connected(mqtt_client_t* client);

espr_t          mqtt_client_subscribe(mqtt_client_t* client, const char* topic, uint8_t qos, void* arg);
espr_t          mqtt_client_unsubscribe(mqtt_client_t* client, const char* topic, void* arg);

espr_t          mqtt_client_publish(mqtt_client_t* client, const char* topic, const void* payload, uint16_t len, uint8_t qos, uint8_t retain, void* arg);
    
/**
 * \}
 */

/* C++ detection */
#ifdef __cplusplus
}
#endif

#endif /* __ESP_APP_MQTT_CLIENT_H */
